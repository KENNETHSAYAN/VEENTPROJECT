/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    'event-announcements': EventAnnouncement;
    'event-categories': EventCategory;
    events: Event;
    media: Media;
    orders: Order;
    'organizer-photos': OrganizerPhoto;
    organizers: Organizer;
    promotions: Promotion;
    registrants: Registrant;
    'registration-form-templates': RegistrationFormTemplate;
    'seat-maps': SeatMap;
    tickets: Ticket;
    'ticket-types': TicketType;
    transactions: Transaction;
    users: User;
    venues: Venue;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    'event-announcements': EventAnnouncementsSelect<false> | EventAnnouncementsSelect<true>;
    'event-categories': EventCategoriesSelect<false> | EventCategoriesSelect<true>;
    events: EventsSelect<false> | EventsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    orders: OrdersSelect<false> | OrdersSelect<true>;
    'organizer-photos': OrganizerPhotosSelect<false> | OrganizerPhotosSelect<true>;
    organizers: OrganizersSelect<false> | OrganizersSelect<true>;
    promotions: PromotionsSelect<false> | PromotionsSelect<true>;
    registrants: RegistrantsSelect<false> | RegistrantsSelect<true>;
    'registration-form-templates': RegistrationFormTemplatesSelect<false> | RegistrationFormTemplatesSelect<true>;
    'seat-maps': SeatMapsSelect<false> | SeatMapsSelect<true>;
    tickets: TicketsSelect<false> | TicketsSelect<true>;
    'ticket-types': TicketTypesSelect<false> | TicketTypesSelect<true>;
    transactions: TransactionsSelect<false> | TransactionsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    venues: VenuesSelect<false> | VenuesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * Post updates or announcements related to specific events.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event-announcements".
 */
export interface EventAnnouncement {
  id: number;
  event: number | Event;
  title: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  status: 'draft' | 'published';
  /**
   * Optional: Set a specific time for when this announcement is considered published (can be used for sorting/filtering). Defaults to creation time if published immediately.
   */
  publishDate?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Core collection for managing individual events.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: number;
  title: string;
  slug: string;
  location: string;
  status: 'Draft' | 'Published' | 'Cancelled' | 'Archived';
  startTime: string;
  endTime: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  organizer: number | Organizer;
  venue: number | Venue;
  category?: (number | null) | EventCategory;
  eventImages?: (number | Media)[] | null;
  /**
   * Select the seating arrangement type.
   */
  seatingType: 'general_admission' | 'reserved_seating';
  /**
   * Select the seat map layout for this event.
   */
  seatMap?: (number | null) | SeatMap;
  /**
   * Optional overall venue limit for this event.
   */
  totalCapacity?: number | null;
  /**
   * Select the MANDATORY registration form attendees must complete.
   */
  registrationForm: number | RegistrationFormTemplate;
  /**
   * Optional notes or instructions to display alongside the registration form.
   */
  registrationNotes?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * List specific contact persons for this event (if different from Organizer/Venue).
   */
  eventContacts?:
    | {
        contactName: string;
        contactRole?: string | null;
        contactEmail?: string | null;
        contactPhone?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Individuals or organizations hosting events.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "organizers".
 */
export interface Organizer {
  id: number;
  name: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  contactEmail?: string | null;
  website?: string | null;
  logo?: (number | null) | OrganizerPhoto;
  /**
   * Optional banner for profile pages.
   */
  bannerImage?: (number | null) | OrganizerPhoto;
  /**
   * Select additional photos associated with this organizer.
   */
  photoGallery?: (number | OrganizerPhoto)[] | null;
  /**
   * Users permitted to manage this organizer profile and their events.
   */
  managingUsers: (number | User)[];
  updatedAt: string;
  createdAt: string;
}
/**
 * Dedicated image library for organizer logos, banners, etc.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "organizer-photos".
 */
export interface OrganizerPhoto {
  id: number;
  /**
   * Describe the image for screen readers and SEO. Crucial for accessibility.
   */
  alt: string;
  caption?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    logo?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    banner?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name?: string | null;
  /**
   * Assign roles that grant specific permissions throughout the application.
   */
  roles: ('admin' | 'organizer' | 'attendee' | 'check-in-staff')[];
  /**
   * Internal ID linking to the Clerk authentication provider.
   */
  clerkId?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * Physical locations where events can be held.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "venues".
 */
export interface Venue {
  id: number;
  name: string;
  address?: {
    street?: string | null;
    city?: string | null;
    stateProvince?: string | null;
    postalCode?: string | null;
    country?: string | null;
  };
  /**
   * General maximum attendee capacity (may differ from event-specific limits).
   */
  capacity?: number | null;
  contactEmail?: string | null;
  contactPhone?: string | null;
  website?: string | null;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  images?: (number | Media)[] | null;
  /**
   * Internal notes about typical seating arrangements or venue specifics.
   */
  seatingChartNotes?: string | null;
  /**
   * Optional: Select a default seat map layout commonly used at this venue.
   */
  defaultSeatMap?: (number | null) | SeatMap;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * Define reusable seating chart layout templates (sections, rows, seats).
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "seat-maps".
 */
export interface SeatMap {
  id: number;
  /**
   * Unique name for this layout (e.g., "Standard Theater Setup", "Workshop Room B Layout").
   */
  name: string;
  /**
   * Optionally associate this layout primarily with one venue for easier filtering.
   */
  venue?: (number | null) | Venue;
  description?: string | null;
  /**
   * Define distinct seating areas (e.g., Orchestra, Balcony, Floor).
   */
  sections?:
    | {
        /**
         * e.g., ORCH, MEZZ, GAFLR, A, B
         */
        sectionName: string;
        rows?:
          | {
              /**
               * e.g., A, B, AA, 1, 2, GA1
               */
              rowLabel: string;
              seats?:
                | {
                    seatNumber: string;
                    seatType:
                      | 'standard'
                      | 'wheelchair'
                      | 'companion'
                      | 'restricted_view'
                      | 'premium'
                      | 'aisle_marker'
                      | 'unavailable';
                    /**
                     * Can this seat type generally be sold?
                     */
                    isPurchasable?: boolean | null;
                    id?: string | null;
                  }[]
                | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Broad categories for events (e.g., Music, Workshop, Conference, Community).
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event-categories".
 */
export interface EventCategory {
  id: number;
  /**
   * The name of the category (e.g., Technology, Music Festival, Charity). Must be unique.
   */
  name: string;
  /**
   * Optional internal or public-facing description for the category.
   */
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Define reusable structures for mandatory event registration forms.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "registration-form-templates".
 */
export interface RegistrationFormTemplate {
  id: number;
  /**
   * Internal name for this form template (e.g., "Standard Attendee Info", "Workshop Detailed Info").
   */
  name: string;
  /**
   * Optional internal notes about when/where to use this template.
   */
  description?: string | null;
  /**
   * Define the form structure using JSON. It MUST be an array of field definition objects. Each object requires 'name', 'label', 'fieldType'. Optional fields: 'required' (boolean), 'options' (array of {label, value} for select), 'placeholder', 'helpText'. Example: [{"name": "tShirtSize", "label": "T-Shirt Size", "fieldType": "select", "options": [{"label": "Small", "value": "s"}, {"label": "Medium", "value": "m"}], "required": true}]
   */
  formDefinition:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Records of ticket purchases (by users or guests) and their status.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders".
 */
export interface Order {
  id: number;
  /**
   * Link to the user account if the purchase was made while logged in.
   */
  orderedBy?: (number | null) | User;
  guestEmail?: string | null;
  event: number | Event;
  items: {
    ticketType: number | TicketType;
    quantity: number;
    pricePerTicket: number;
    currency: string;
    subtotal: number;
    id?: string | null;
  }[];
  subtotalAmount?: number | null;
  promotion?: (number | null) | Promotion;
  discountAmount?: number | null;
  /**
   * Amount donated during checkout (if applicable).
   */
  donationAmount?: number | null;
  finalAmount: number;
  currency: string;
  paymentIntentId?: string | null;
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Define specific ticket tiers for events (e.g., GA, VIP) and their available quantity.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ticket-types".
 */
export interface TicketType {
  id: number;
  event: number | Event;
  /**
   * e.g., General Admission, VIP Pass, Early Bird
   */
  name: string;
  description?: string | null;
  price: number;
  currency: 'USD' | 'PHP' | 'EUR';
  /**
   * Total inventory count FOR THIS SPECIFIC ticket type.
   */
  quantityAvailable: number;
  salesStart?: string | null;
  salesEnd?: string | null;
  status: 'active' | 'inactive';
  minOrderQuantity?: number | null;
  maxOrderQuantity?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage discount codes and promotions for ticket orders.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "promotions".
 */
export interface Promotion {
  id: number;
  /**
   * The code users enter (forced uppercase). e.g., EARLYBIRD20
   */
  code: string;
  description: string;
  status: 'active' | 'inactive' | 'expired';
  discountType: 'percentage' | 'fixed_amount';
  /**
   * % or fixed amount
   */
  discountValue: number;
  currency?: ('USD' | 'PHP' | 'EUR') | null;
  /**
   * Optional: Max total uses. Blank for unlimited.
   */
  usageLimit?: number | null;
  validFrom?: string | null;
  validUntil?: string | null;
  /**
   * Optional: Order total must meet this amount.
   */
  minimumOrderAmount?: number | null;
  appliesToAllEvents?: boolean | null;
  /**
   * Only applies to these specific events if not checked above.
   */
  applicableEvents?: (number | Event)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Stores submitted answers from mandatory registration forms per ticket.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "registrants".
 */
export interface Registrant {
  id: number;
  /**
   * The unique ticket this registration data belongs to.
   */
  ticket: number | Ticket;
  event: number | Event;
  /**
   * The logged-in user account associated with this registration.
   */
  registeredUser?: (number | null) | User;
  guestDetails?: {
    guestEmail?: string | null;
    guestFirstName: string;
    guestLastName: string;
  };
  /**
   * The actual data submitted by the attendee via the event's registration form.
   */
  submittedAnswers:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Individual tickets issued per order, used for check-in.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tickets".
 */
export interface Ticket {
  id: number;
  order: number | Order;
  event: number | Event;
  ticketType: number | TicketType;
  /**
   * Link to the user account, if the ticket holder has one and was logged in during purchase/registration.
   */
  attendee?: (number | null) | User;
  /**
   * Unique identifier for check-in/QR code.
   */
  ticketCode: string;
  checkInStatus: 'pending' | 'checked_in' | 'invalid';
  checkedInAt?: string | null;
  checkedInBy?: (number | null) | User;
  /**
   * Specific seat assignment; only relevant if the linked event uses reserved seating.
   */
  assignedSeat?: {
    seatMapSection?: string | null;
    seatMapRow?: string | null;
    seatMapNumber?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * Financial ledger recording all monetary transactions per organizer.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "transactions".
 */
export interface Transaction {
  id: number;
  organizer: number | Organizer;
  transactionDate: string;
  type:
    | 'ticket_sale'
    | 'donation'
    | 'refund_sale'
    | 'refund_donation'
    | 'platform_fee'
    | 'payment_fee'
    | 'payout'
    | 'payout_fee'
    | 'adj_credit'
    | 'adj_debit';
  /**
   * Value of the transaction. Positive for income (sales, donations), Negative for expenses (refunds, fees, payouts).
   */
  amount: number;
  currency: string;
  /**
   * Brief description (e.g., "Sale for Order #123", "Stripe Fee for ch_xyz")
   */
  description: string;
  relatedOrder?: (number | null) | Order;
  relatedUser?: (number | null) | User;
  relatedPaymentIntentId?: string | null;
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'event-announcements';
        value: number | EventAnnouncement;
      } | null)
    | ({
        relationTo: 'event-categories';
        value: number | EventCategory;
      } | null)
    | ({
        relationTo: 'events';
        value: number | Event;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'orders';
        value: number | Order;
      } | null)
    | ({
        relationTo: 'organizer-photos';
        value: number | OrganizerPhoto;
      } | null)
    | ({
        relationTo: 'organizers';
        value: number | Organizer;
      } | null)
    | ({
        relationTo: 'promotions';
        value: number | Promotion;
      } | null)
    | ({
        relationTo: 'registrants';
        value: number | Registrant;
      } | null)
    | ({
        relationTo: 'registration-form-templates';
        value: number | RegistrationFormTemplate;
      } | null)
    | ({
        relationTo: 'seat-maps';
        value: number | SeatMap;
      } | null)
    | ({
        relationTo: 'tickets';
        value: number | Ticket;
      } | null)
    | ({
        relationTo: 'ticket-types';
        value: number | TicketType;
      } | null)
    | ({
        relationTo: 'transactions';
        value: number | Transaction;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'venues';
        value: number | Venue;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event-announcements_select".
 */
export interface EventAnnouncementsSelect<T extends boolean = true> {
  event?: T;
  title?: T;
  content?: T;
  status?: T;
  publishDate?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event-categories_select".
 */
export interface EventCategoriesSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events_select".
 */
export interface EventsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  location?: T;
  status?: T;
  startTime?: T;
  endTime?: T;
  description?: T;
  organizer?: T;
  venue?: T;
  category?: T;
  eventImages?: T;
  seatingType?: T;
  seatMap?: T;
  totalCapacity?: T;
  registrationForm?: T;
  registrationNotes?: T;
  eventContacts?:
    | T
    | {
        contactName?: T;
        contactRole?: T;
        contactEmail?: T;
        contactPhone?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders_select".
 */
export interface OrdersSelect<T extends boolean = true> {
  orderedBy?: T;
  guestEmail?: T;
  event?: T;
  items?:
    | T
    | {
        ticketType?: T;
        quantity?: T;
        pricePerTicket?: T;
        currency?: T;
        subtotal?: T;
        id?: T;
      };
  subtotalAmount?: T;
  promotion?: T;
  discountAmount?: T;
  donationAmount?: T;
  finalAmount?: T;
  currency?: T;
  paymentIntentId?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "organizer-photos_select".
 */
export interface OrganizerPhotosSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        logo?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        banner?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "organizers_select".
 */
export interface OrganizersSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  contactEmail?: T;
  website?: T;
  logo?: T;
  bannerImage?: T;
  photoGallery?: T;
  managingUsers?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "promotions_select".
 */
export interface PromotionsSelect<T extends boolean = true> {
  code?: T;
  description?: T;
  status?: T;
  discountType?: T;
  discountValue?: T;
  currency?: T;
  usageLimit?: T;
  validFrom?: T;
  validUntil?: T;
  minimumOrderAmount?: T;
  appliesToAllEvents?: T;
  applicableEvents?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "registrants_select".
 */
export interface RegistrantsSelect<T extends boolean = true> {
  ticket?: T;
  event?: T;
  registeredUser?: T;
  guestDetails?:
    | T
    | {
        guestEmail?: T;
        guestFirstName?: T;
        guestLastName?: T;
      };
  submittedAnswers?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "registration-form-templates_select".
 */
export interface RegistrationFormTemplatesSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  formDefinition?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "seat-maps_select".
 */
export interface SeatMapsSelect<T extends boolean = true> {
  name?: T;
  venue?: T;
  description?: T;
  sections?:
    | T
    | {
        sectionName?: T;
        rows?:
          | T
          | {
              rowLabel?: T;
              seats?:
                | T
                | {
                    seatNumber?: T;
                    seatType?: T;
                    isPurchasable?: T;
                    id?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tickets_select".
 */
export interface TicketsSelect<T extends boolean = true> {
  order?: T;
  event?: T;
  ticketType?: T;
  attendee?: T;
  ticketCode?: T;
  checkInStatus?: T;
  checkedInAt?: T;
  checkedInBy?: T;
  assignedSeat?:
    | T
    | {
        seatMapSection?: T;
        seatMapRow?: T;
        seatMapNumber?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ticket-types_select".
 */
export interface TicketTypesSelect<T extends boolean = true> {
  event?: T;
  name?: T;
  description?: T;
  price?: T;
  currency?: T;
  quantityAvailable?: T;
  salesStart?: T;
  salesEnd?: T;
  status?: T;
  minOrderQuantity?: T;
  maxOrderQuantity?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "transactions_select".
 */
export interface TransactionsSelect<T extends boolean = true> {
  organizer?: T;
  transactionDate?: T;
  type?: T;
  amount?: T;
  currency?: T;
  description?: T;
  relatedOrder?: T;
  relatedUser?: T;
  relatedPaymentIntentId?: T;
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  roles?: T;
  clerkId?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "venues_select".
 */
export interface VenuesSelect<T extends boolean = true> {
  name?: T;
  address?:
    | T
    | {
        street?: T;
        city?: T;
        stateProvince?: T;
        postalCode?: T;
        country?: T;
      };
  capacity?: T;
  contactEmail?: T;
  contactPhone?: T;
  website?: T;
  description?: T;
  images?: T;
  seatingChartNotes?: T;
  defaultSeatMap?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}